~~ {
~~ FOR AUTO-COMPLETION ASSISTANCE: testvar getvar setvar touchvar clearallvars clearvar getcharintprop getchardoubleprop getcharquadprop getcharboolprop getcharstringprop getisspellknown getcancastspell_hunt getcancastspell_buff getcharvital_base getcharvital_current getcharvital_buffedmax getcharskill_traininglevel getcharskill_base getcharskill_buffed getplayerlandcell getplayercoordinates coordinategetns coordinategetwe coordinategetz coordinatetostring coordinateparse coordinatedistancewithz coordinatedistanceflat wobjectgetphysicscoordinates wobjectgetname wobjectgetobjectclass wobjectgettemplatetype wobjectgetisdooropen wobjectfindnearestmonster wobjectfindnearestdoor wobjectfindnearestbyobjectclass wobjectfindininventorybytemplatetype wobjectfindininventorybyname wobjectfindininventorybynamerx wobjectgetselection wobjectgetplayer wobjectfindnearestbynameandobjectclass actiontryselect actiontryuseitem actiontryapplyitem actiontrygiveitem actiontryequipanywand actiontrycastbyid actiontrycastbyidontarget chatbox chatboxpaste statushud statushudcolored uigetcontrol uisetlabel isfalse istrue iif randint cstr strlen getobjectinternaltype cstrf stopwatchcreate stopwatchstart stopwatchstop stopwatchelapsedseconds cnumber floor ceiling round abs getworldname getitemcountininventorybyname getheading getitemcountininventorybynamerx getheadingto actiontrygiveprofile vitae getfellowshipstatus getfellowshipname getfellowshipisopen getfellowshipisleader getfellowshipleaderid getfellowshipcanrecruit getfellowid getfellowshipcount getfellowshiplocked getfellowname getfellowshipisfull sin cos tan sqrt asin acos atan atan2 sinh cosh tanh vtsetmetastate getregexmatch echo chr ord wobjectgetid wobjectgethealth wobjectfindbyid tostring[wobjectgetintprop wobjectfindnearestbytemplatetype wobjectgetopencontainer testquestflag getquestktprogress isrefreshingquests getquestktrequired getqueststatus getisday getgamehour getgamehourname getisnight getgameday getgameticks getminutesuntilday getgamemonth getgamemonthname getminutesuntilnight getgameyear uisetvisible uiviewvisible uiviewexists getgvar touchgvar getpvar touchpvar setgvar cleargvar setpvar clearpvar testgvar clearallgvars testpvar clearallpvars dictgetitem dictcreate dicthaskey listadditem dictkeys dictremovekey dictvalues dictclear dictsize dictcopy listgetitem listpop listcreate listcontains listremove listadd listindexof listremoveat listinsert listlastindexof listclear listcopy listcount listreverse

~~																						
~~ File auto-generated by metaf, a program created by Eskarina of Morningthaw/Coldeve.	
~~		Get metaf here: https://github.com/JJEII/metaf/									
~~																						
~~ All recognized structural designators:												
~~		STATE:				DO:															
~~		IF:					NAV:														
~~																						
~~ All recognized CONDITION (IF:) operation keywords:									
~~		Never				NavEmpty			MobsInDist_Priority		Not				
~~		Always				Death				NeedToBuff				PSecsInStateGE	
~~		All					VendorOpen			NoMobsInDist			SecsOnSpellGE	
~~		Any					VendorClosed		BlockE					BuPercentGE		
~~		ChatMatch			ItemCountLE			CellE					DistToRteGE		
~~		MainSlotsLE			ItemCountGE			IntoPortal				Expr			
~~		SecsInStateGE		MobsInDist_Name		ExitPortal				ChatCapture		
~~																						
~~ All recognized ACTION (DO:) operation keywords:										
~~		None				EmbedNav			ChatExpr				SetOpt			
~~		SetState			CallState			SetWatchdog				CreateView		
~~		Chat				Return				ClearWatchdog			DestroyView		
~~		DoAll				DoExpr				GetOpt					DestroyAllViews	
~~																						
~~ All recognized NAV types:															
~~		circular			follow														
~~		linear				once														
~~																						
~~ All recognized NAV NODE types:														
~~		flw					vnd															
~~		pnt					ptl															
~~		rcl					tlk															
~~		pau					chk															
~~		cht					jmp															
~~		prt (deprecated in VTank)														
~~ }																					

~~ test
STATE: {Default} ~~ {
	IF: Always
		DO:	SetState {Settings}		
~~ }
STATE: {Settings} ~~ {
	IF:	Always
		DO:	DoAll
				Chat {/ub opt set VTank.PatchExpressionEngine True}
				DoExpr {vtsetsetting[NavCloseStopRange,`0.00625`]} ~~ 1.5
				DoExpr {vtsetsetting[EnableBuffing,`0`]}
				DoExpr {vtsetsetting[EnableCombat,`0`]}
				DoExpr {vtsetsetting[EnableNav,`1`]}
				DoExpr {vtsetsetting[IdlePeaceMode,`1`]}
				DoExpr {vtsetsetting[OpenDoors,`1`]}
				DoExpr {setvar[olthoiSacs,getitemcountininventorybyname[`Small Olthoi Venom Sac`]]}
				DoExpr {setvar[coloCoins,getitemcountininventorybyname[`Colosseum Coin`]]}
				DoExpr {setvar[ancientMhoireCoins,getitemcountininventorybyname[`Ancient Mhoire Coin`]]}
				DoExpr {setvar[ornateGearMarkers,getitemcountininventorybyname[`Ornate Gear Marker`]]}
				DoExpr {setvar[anekshayTokens,getitemcountininventorybyname[`A'nekshay Tokens`]]}
				DoExpr {setvar[promNotes,getitemcountininventorybyname[`Promissory Note`]]}
				DoExpr {clearvar[multiplier]}
				DoExpr {clearvar[targetCurrencyCount]}
				DoExpr {clearvar[targetCurrencyName]}
				DoExpr {clearvar[promNotesNeeded]}
				DoExpr {clearvar[targetCurrencyNeeded]}
	IF: SecsInStateGE 3
		DO: SetState {Begin}				
~~ }
STATE: {Begin} ~~ {
	IF: Always
		DO: DoAll
				DoExpr {echo[Paragon Currency Exchange Meta by Sun Invictus,5]}
				DoExpr {echo[Exchanges alt currency for Paragon 1000 currency levels,5]}
	IF: SecsInStateGE 5
		DO: SetState {PromptUser}
~~ }
STATE: {PromptUser} ~~ {
	IF: Always
		DO: DoExpr {echo[Awaiting command which starts with \!  Options\: olthoi\, gear\, mhoire\, anekshay\, colo\, allprom,15]} 
	IF: ChatMatch {.*\"!olthoi\"$} 
		DO: DoAll	
				DoExpr {setvar[multiplier,4]}
				DoExpr {setvar[targetCurrencyCount,getvar[olthoiSacs]]}
				DoExpr {setvar[targetCurrencyName,`Small Olthoi Venom Sacs`]}
				SetState {DetermineNeededAmount}
	IF: ChatMatch {.*\"!gear\"$} 
		DO: DoAll	
				DoExpr {setvar[multiplier,4]}
				DoExpr {setvar[targetCurrencyCount,getvar[ornateGearMarkers]]}
				DoExpr {setvar[targetCurrencyName,`Ornate Gear Markers`]}
				SetState {DetermineNeededAmount}
	IF: ChatMatch {.*\"!mhoire\"$} 
		DO: DoAll	
				DoExpr {setvar[multiplier,2]}
				DoExpr {setvar[targetCurrencyCount,getvar[ancientMhoireCoins]]}
				DoExpr {setvar[targetCurrencyName,`Ancient Mhoire Coins`]}
				SetState {DetermineNeededAmount}
	IF: ChatMatch {.*\"!anekshay\"$}  
		DO: DoAll	
				DoExpr {setvar[multiplier,1]}
				DoExpr {setvar[targetCurrencyCount,getvar[anekshayTokens]]}
				DoExpr {setvar[targetCurrencyName,`A'nekshay Tokens`]}
				SetState {DetermineNeededAmount}
	IF: ChatMatch {.*\"!colo\"$}  
		DO: DoAll	
				DoExpr {setvar[multiplier,10]}
				DoExpr {setvar[targetCurrencyCount,getvar[coloCoins]]}
				DoExpr {setvar[targetCurrencyName,`Colosseum Coins`]}
				SetState {DetermineNeededAmount}
	IF: ChatMatch {.*\"!allprom\"$}  
		DO: SetState {AllPromCheckColoCoins}
~~ }
STATE: {AllPromCheckColoCoins} ~~ {
	IF: Expr {$coloCoins>=0}
		DO: DoAll
				DoExpr {setvar[exchangeColo,1]}
				CallState {CheckForTNDrop} {AllPromNavigatingToHigashiyama}
	IF: Expr {$coloCoins==0}
		DO: DoAll
				DoExpr {echo[`I have no colosseum coins to exchange`,15]}
				SetState {End}
~~ }
STATE: {DetermineNeededAmount} ~~ {
	IF: Always
		DO: DoAll
				~~ round up number needed to nearest 10s digit so we only buy boxes of 10
				DoExpr {setvar[targetCurrencyNeeded,ceiling[((1000-$targetCurrencyCount)/10)]*10]}
				DoExpr {echo[`I have ` +$targetCurrencyCount+ ` ` +$targetCurrencyName+ ` and need 1000`,15]}
				~~ total needed of alt currency times prom note cost for 1
				DoExpr {setvar[promNotesNeeded,$targetCurrencyNeeded*$multiplier]}
				DoExpr {echo[`I need ` +$promNotesNeeded+ ` Promissory Notes in order to exchange for the remainder`,15]}
				SetState {CheckPromNotes}
~~ }
STATE: {CheckPromNotes} ~~ {
	IF: Expr {$promNotes>=$promNotesNeeded}
		DO: DoAll
				DoExpr {setvar[promNotesOnly,`True`]}
				DoExpr {echo[`I have ` +$promNotes+ ` Promissory Notes and can perform the exchange`,15]}
				CallState {CheckForTNDrop} {NavigatingToHigashiyama}
	IF: All
			Expr {$promNotes < $promNotesNeeded}
			Expr {$targetCurrencyName!=`Colosseum Coins`}
		DO: DoAll
				DoExpr {setvar[coloCoinsNeeded,ceiling[($promNotesNeeded-$promNotes)/5]]} ~~ 5 prom notes per colo coin
				DoExpr {echo[`I have ` +$promNotes+ ` Promissory Notes and need ` +$coloCoinsNeeded+ ` to exchange for prom notes`,15]}
				SetState {CheckColoCoins}
	IF: All
			Expr {$promNotes < $promNotesNeeded}
			Expr {$targetCurrencyName==`Colosseum Coins`}
		DO: DoAll
				DoExpr {echo[`I have only ` +$promNotes+ ` Promissory Notes`,15]}
				SetState {End}
~~ }
STATE: {CheckColoCoins} ~~ {
	IF: Expr {$coloCoins>=$coloCoinsNeeded}
		DO: DoAll
				DoExpr {setvar[promNotesOnly,`False`]}
				DoExpr {echo[`I have ` +$coloCoins+ ` Colosseum Coins and can do the exchange`,15]}
				CallState {CheckForTNDrop} {NavigatingToHigashiyama}
	IF: Expr {$coloCoins<$coloCoinsNeeded}
		DO: DoAll
				DoExpr {setvar[promNotesFromColoCoins,$coloCoins*5]}
				DoExpr {setvar[promNotesSubtotal,$promNotes+$promNotesFromColoCoins]}
				DoExpr {setvar[promNotesDiff,$promNotesNeeded-$promNotesSubtotal]}
				DoExpr {echo[`I have only ` +$coloCoins)+ ` Colosseum Coins`,15]}
				DoExpr {echo[`I could exchange for an additional ` +$promNotesFromColoCoins+ ` prom notes, for a total of ` +$promNotesSubtotal+,15]}
				DoExpr {echo[`But I would be ` +$promNotesDiff+ ` prom notes short of the needed ` +$promNotesNeeded+,15]}
				SetState {End}
~~ }
STATE: {CheckForTNDrop} ~~ {
	IF: CellE 00070145 ~~ Annex TN drop
		DO: Return
	IF: CellE 00070133 ~~ Gharu'ndim TN drop
		DO: EmbedNav nav1 {TNGharuToAnnex.nav}
	IF: CellE 00070143 ~~ Aluvian TN drop
		DO: EmbedNav nav2 {TNAluvianToAnnex.nav}
	IF: CellE 00070156 ~~ Sho TN drop
		DO: EmbedNav nav3 {TNShoToAnnex.nav}
	IF: Not BlockE 00070000
		DO: SetState {AttemptPrimaryRecallToTN}
~~ }
STATE: {AttemptPrimaryRecallToTN} ~~ {
	IF: Always
		DO: EmbedNav nav4 {PrimaryRecall.nav}
	IF: BlockE 00070000
		DO: SetState {CheckForTNDrop}
	IF: SecsInStateGE 10
		DO: SetState {AttemptSecondaryRecallToTN}
~~ }
STATE: {AttemptSecondaryRecallToTN} ~~ {
	IF: Always
		DO: EmbedNav nav5 {SecondaryRecall.nav}
	IF: BlockE 00070000
		DO: SetState {CheckForTNDrop}
	IF: SecsInStateGE 10
		DO: DoAll
				EmbedNav nav6 {LifestoneRecall.nav}
				SetState {Abort}
~~ }
STATE: {NavigatingToHigashiyama} ~~ {
	IF: Always
		DO: EmbedNav nav0 {TownNetworktoHigashiyama.nav}
	IF: All
			NavEmpty
			SecsInStateGE 3
		DO: SetState {DetermineAction}
~~ }
STATE: {AllPromNavigatingToHigashiyama} ~~ {
	IF: Always
		DO: EmbedNav nav0 {TownNetworktoHigashiyama.nav}
	IF: All
			NavEmpty
			SecsInStateGE 3
		DO: SetState {AllPromExchangeTenColoCoins}
~~ }
STATE: {DetermineAction} ~~ {
	IF: Expr {$promNotesOnly==`True`} 
		DO: SetState {OpenAltCurrencyVendor}
	IF: Expr {$promNotesOnly==`False`}
		DO: DoAll
				DoExpr {setvar[exchangeCounter,0]}
				SetState {ExchangeTenColoCoins}
~~ }
STATE: {ExchangeTenColoCoins} ~~ {
	IF: Expr {$exchangeCounter<$coloCoinsNeeded&&($exchangeCounter+10)<=$coloCoinsNeeded}
		DO: DoAll
				Chat {/ub prepclick yes 3}
				Chat {/ub give 1 Colosseum Coin to Higashiyama Akako}
	IF: Expr {$exchangeCounter<$coloCoinsNeeded&&($exchangeCounter+10)>$coloCoinsNeeded}
		DO: SetState {ExchangeColoCoins}
	IF: SecsInStateGE 5
		DO: SetState {ExchangeTenColoCoins}
	IF: ChatMatch {Higashiyama Akako gives you 50 Promissory Notes}
		DO: DoExpr {setvar[exchangeCounter,$exchangeCounter+10]}
	IF: Expr {$exchangeCounter==$coloCoinsNeeded}
		DO: SetState {OpenAltCurrencyVendor}
~~ }
STATE: {ExchangeColoCoins} ~~ {
	IF: Expr {$exchangeCounter<$coloCoinsNeeded}
		DO: DoAll
				Chat {/ub prepclick no 3}
				Chat {/ub give 1 Colosseum Coin to Higashiyama Akako}
	IF: SecsInStateGE 5
		DO: SetState {ExchangeColoCoins}
	IF: ChatMatch {Higashiyama Akako gives you 5 Promissory Notes}
		DO: DoExpr {setvar[exchangeCounter,$exchangeCounter+1]}
	IF: Expr {$exchangeCounter==$coloCoinsNeeded}
		DO: SetState {OpenAltCurrencyVendor}
~~ }
STATE: {OpenAltCurrencyVendor} ~~ {
	IF: SecsInStateGE 3
		DO: Chat {/ub vendor open Absalom Sarraf}
	IF: SecsInStateGE 10
		DO: DoAll
				DoExpr {setvar[promNotes,getitemcountininventorybyname[`Promissory Note`]]}
				SetState {WaitingForAutoVendorProfileToBeManuallyLoaded}
~~ }
STATE: {WaitingForAutoVendorProfileToBeManuallyLoaded} ~~ {
	IF: Always
		DO: DoAll
				DoExpr {echo[`I have ` +$promNotes+ ` prom notes.  Need a profile which will buy ` +floor[$promNotes/($multiplier*10)]+ ` boxes`,15]}
				DoExpr {echo[Update and then load vendor profile using \/ub autovendor filename,15]}
	IF: ChatMatch {AutoVendor finished:}
		DO: SetState {OpenBoxes}
~~ }
STATE: {OpenBoxes} ~~ {
	IF: ItemCountGE 1 {Box Of Ten Small Olthoi Venom Sacs}
		DO: Chat {/ub usei Box Of Ten Small Olthoi Venom Sacs}
	IF: ItemCountGE 1 {Box Of Ten Ornate Gear Markers}
		DO: Chat {/ub usei Box Of Ten Ornate Gear Markers}
	IF: ItemCountGE 1 {Box Of Ten Ancient Mhoire Coins}
		DO: Chat {/ub usei Box Of Ten Ancient Mhoire Coins}
	IF: ItemCountGE 1 {Box Of Ten A'nekshay Tokens}
		DO: Chat {/ub usei Box Of Ten A'nekshay Tokens}
	IF: ItemCountGE 1 {Box Of Ten Colosseum Coins}
		DO: Chat {/ub usei Box Of Ten Colosseum Coins}
	IF: SecsInStateGE 3
		DO: SetState {OpenBoxes}
	IF: All
			ItemCountLE 0 {Box Of Ten Small Olthoi Venom Sacs}
			ItemCountLE 0 {Box Of Ten Ornate Gear Markers}
			ItemCountLE 0 {Box Of Ten Ancient Mhoire Coins}
			ItemCountLE 0 {Box Of Ten A'nekshay Tokens}
			ItemCountLE 0 {Box Of Ten Colosseum Coins}
		DO: SetState {End}
~~ }
STATE: {AllPromExchangeTenColoCoins} ~~ {
	IF: Expr {$coloCoins>=10}
		DO: DoAll
				Chat {/ub prepclick yes 3}
				Chat {/ub give 1 Colosseum Coin to Higashiyama Akako}
	IF: Expr {$coloCoins<10}
		DO: SetState {AllPromExchangeColoCoins}
	IF: SecsInStateGE 5
		DO: DoAll
				DoExpr {setvar[coloCoins,getitemcountininventorybyname[`Colosseum Coin`]]}
				SetState {AllPromExchangeTenColoCoins}
~~ }
STATE: {AllPromExchangeColoCoins} ~~ {
	IF: Expr {$coloCoins>0}
		DO: Chat {/ub give 1 Colosseum Coin to Higashiyama Akako}
	IF: Expr {$coloCoins==0}
		DO: SetState {End}
	IF: SecsInStateGE 5
		DO: DoAll
				DoExpr {setvar[coloCoins,getitemcountininventorybyname[`Colosseum Coin`]]}
				SetState {AllPromExchangeColoCoins}
~~ }
STATE: {End} ~~ {
	IF: All
			SecsInStateGE 30
			Expr {testgvar[defaultMeta]==1}
		DO: ChatExpr {\/vt meta load +getgvar[defaultMeta]}
~~ }

~~========================= ONLY NAVS APPEAR BELOW THIS LINE =========================~~

NAV: nav0 once ~~ {
	pnt -101.658333333333 -96.6833333333333 2.08333134651184E-05
	pnt -101.681108442942 -96.6658519426982 2.08333134651184E-05
	pnt -101.710438410441 -96.6402758916219 2.08333134651184E-05
	pnt -101.732948557536 -96.6413989384969 2.08333134651184E-05
	pnt -101.770907402039 -96.6422743797302 2.08333134651184E-05
	pnt -101.805687967936 -96.6403018951416 2.08333134651184E-05
	pnt -101.840211852392 -96.6293908119202 2.08333134651184E-05
	pnt -101.873765087128 -96.609926478068 2.08333134651184E-05
	pnt -101.898007146517 -96.5912041346232 2.08333134651184E-05
	pnt -101.905480972926 -96.5840930779775 2.08333134651184E-05
	ptl 0.270945167541504 12.9017890930176 0.516687520345052 -101.90858749946 -96.5742208321889 -0.000262499845121056 14 {Portal to Zaikhal}
	pnt 0.695347881317139 13.450811735789 0.516687520345052
	pnt 0.631316010157267 13.3665616114934 0.516687520345052
	pnt 0.586062494913737 13.2626480420431 0.516687520345052
	pnt 0.543755165735881 13.1731824874878 0.516687520345052
	pnt 0.514552291234334 13.1114285151164 0.516687520345052
	pnt 0.492317811648051 13.0691132863363 0.516687520345052
	pnt 0.450327319403489 13.0224655151367 0.516687520345052
	pnt 0.425372441609701 12.9830125172933 0.516687520345052
	pnt 0.404883321126302 12.9468949953715 0.516687520345052
	pnt 0.37864621480306 12.9170661290487 0.516687520345052
	pnt 0.358833885192871 12.9004745483398 0.516687520345052
	pnt 0.351820437113444 12.9004062970479 0.516687520345052
	pnt 0.344774182637533 12.9003704388936 0.516687520345052
	pnt 0.337744331359863 12.9003184000651 0.514769204457601
	pnt 0.302904637654622 12.8994622866313 0.505020840962728
	pnt 0.293876202901204 12.9000647226969 0.505020840962728
	pnt 0.291927401224772 12.8933100382487 0.505020840962728
	pnt 0.291528065999349 12.8861665089925 0.505020840962728
	pnt 0.295749664306641 12.8805449167887 0.505020840962728
	pnt 0.301049296061198 12.8734936714172 0.505020840962728
	pnt 0.301884587605794 12.86651318868 0.505020840962728
	pnt 0.295299466451009 12.8647314071655 0.505020840962728
	pnt 0.289737192789714 12.8656782786051 0.507750638326009
	pnt 0.285609881083171 12.8655735333761 0.511052513122559
	pnt 0.28148250579834 12.8654687563578 0.514354419708252
	pnt 0.27379519144694 12.8653044382731 0.516687520345052
	pnt 0.266765721638997 12.8651996612549 0.516687520345052
	pnt 0.267581303914388 12.8723076820374 0.516687520345052
	pnt 0.268955548604329 12.8843843460083 0.516687520345052
	pnt 0.270143572489421 12.8948047955831 0.516687520345052
	pnt 0.270945167541504 12.9017890930176 0.516687520345052
~~ }
NAV: nav1 once ~~ {
	pnt -101.657279141744 -96.6906586329142 2.08333134651184E-05
~~ }
NAV: nav2 once ~~ {
	pnt -101.613241004944 -96.6465869903564 2.08333134651184E-05
	pnt -101.657922903697 -96.6921284039815 2.08333134651184E-05
~~ }
NAV: nav3 once ~~ {
	pnt -101.657663281759 -96.6933292071025 2.08333134651184E-05
~~ }
NAV: nav4 once ~~ {
	rcl -101.657922903697 -96.6921284039815 2.08333134651184E-05 {Primary Portal Recall}
~~ }
NAV: nav5 once ~~ {
	rcl -101.657922903697 -96.6921284039815 2.08333134651184E-05 {Secondary Portal Recall}
~~ }
NAV: nav6 once ~~ {
	rcl 56.8844753265381 33.6273729642232 0.175020837783813 {Lifestone Recall}
~~ }
