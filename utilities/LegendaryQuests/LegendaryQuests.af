~~ {
~~ FOR AUTO-COMPLETION ASSISTANCE: testvar getvar setvar touchvar clearallvars clearvar getcharintprop getchardoubleprop getcharquadprop getcharboolprop getcharstringprop getisspellknown getcancastspell_hunt getcancastspell_buff getcharvital_base getcharvital_current getcharvital_buffedmax getcharskill_traininglevel getcharskill_base getcharskill_buffed getplayerlandcell getplayercoordinates coordinategetns coordinategetwe coordinategetz coordinatetostring coordinateparse coordinatedistancewithz coordinatedistanceflat wobjectgetphysicscoordinates wobjectgetname wobjectgetobjectclass wobjectgettemplatetype wobjectgetisdooropen wobjectfindnearestmonster wobjectfindnearestdoor wobjectfindnearestbyobjectclass wobjectfindininventorybytemplatetype wobjectfindininventorybyname wobjectfindininventorybynamerx wobjectgetselection wobjectgetplayer wobjectfindnearestbynameandobjectclass actiontryselect actiontryuseitem actiontryapplyitem actiontrygiveitem actiontryequipanywand actiontrycastbyid actiontrycastbyidontarget chatbox chatboxpaste statushud statushudcolored uigetcontrol uisetlabel isfalse istrue iif randint cstr strlen getobjectinternaltype cstrf stopwatchcreate stopwatchstart stopwatchstop stopwatchelapsedseconds cnumber floor ceiling round abs getworldname getitemcountininventorybyname getheading getitemcountininventorybynamerx getheadingto actiontrygiveprofile vitae getfellowshipstatus getfellowshipname getfellowshipisopen getfellowshipisleader getfellowshipleaderid getfellowshipcanrecruit getfellowid getfellowshipcount getfellowshiplocked getfellowname getfellowshipisfull sin cos tan sqrt asin acos atan atan2 sinh cosh tanh vtsetmetastate getregexmatch echo chr ord wobjectgetid wobjectgethealth wobjectfindbyid tostring[wobjectgetintprop wobjectfindnearestbytemplatetype wobjectgetopencontainer testquestflag getquestktprogress isrefreshingquests getquestktrequired getqueststatus getisday getgamehour getgamehourname getisnight getgameday getgameticks getminutesuntilday getgamemonth getgamemonthname getminutesuntilnight getgameyear uisetvisible uiviewvisible uiviewexists getgvar touchgvar getpvar touchpvar setgvar cleargvar setpvar clearpvar testgvar clearallgvars testpvar clearallpvars dictgetitem dictcreate dicthaskey listadditem dictkeys dictremovekey dictvalues dictclear dictsize dictcopy listgetitem listpop listcreate listcontains listremove listadd listindexof listremoveat listinsert listlastindexof listclear listcopy listcount listreverse

~~																						
~~ File auto-generated by metaf, a program created by Eskarina of Morningthaw/Coldeve.	
~~		Get metaf here: https://github.com/JJEII/metaf/									
~~																						
~~ All recognized structural designators:												
~~		STATE:				DO:															
~~		IF:					NAV:														
~~																						
~~ All recognized CONDITION (IF:) operation keywords:									
~~		Never				NavEmpty			MobsInDist_Priority		Not				
~~		Always				Death				NeedToBuff				PSecsInStateGE	
~~		All					VendorOpen			NoMobsInDist			SecsOnSpellGE	
~~		Any					VendorClosed		BlockE					BuPercentGE		
~~		ChatMatch			ItemCountLE			CellE					DistToRteGE		
~~		MainSlotsLE			ItemCountGE			IntoPortal				Expr			
~~		SecsInStateGE		MobsInDist_Name		ExitPortal				ChatCapture		
~~																						
~~ All recognized ACTION (DO:) operation keywords:										
~~		None				EmbedNav			ChatExpr				SetOpt			
~~		SetState			CallState			SetWatchdog				CreateView		
~~		Chat				Return				ClearWatchdog			DestroyView		
~~		DO: DoAll				DoExpr				GetOpt					DestroyAllViews	
~~																						
~~ All recognized NAV types:															
~~		circular			follow														
~~		linear				once														
~~																						
~~ All recognized NAV NODE types:														
~~		flw					vnd															
~~		pnt					ptl															
~~		rcl					tlk															
~~		pau					chk															
~~		cht					jmp															
~~		prt (deprecated in VTank)														
~~ }																					

STATE: {Default} ~~ {
	IF: Always
		DO:	SetState {Settings}	
~~ }
STATE: {Settings} ~~ {
	IF:	Always
		DO: DoAll
				Chat {/ub opt set VTank.PatchExpressionEngine True}
				DoExpr {setvar[completeQuests,``]}
				DoExpr {setvar[completeCount,0]}
				DoExpr {setvar[incompleteQuests,``]}
				DoExpr {setvar[incompleteCount,0]}
				DoExpr {echo[Legendary Quests Meta by Sun Invictus,15]}
				SetState {Begin}				
~~ }
STATE: {Begin} ~~ {
	IF: Always
		DO: CallState {RefreshQuests} {RecordQuestStatus}
~~ }
STATE: {RefreshQuests} ~~ {
	IF: Always
		DO: Chat {/ub myquests}
	IF: All
			SecsInStateGE 2
			Expr {isrefreshingquests[]==0}
		DO: Return
~~ }
STATE: {RecordQuestStatus} ~~ {
	IF: Expr {hexstr[(getquestktprogress[legendaryquestsa]&0x1)]==`0x1`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Hoshino Must Die`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x1]!=`0x1`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Hoshino Must Die`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x2]==`0x2`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Hive Queen`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x2]!=`0x2`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Hive Queen`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x4]==`0x4`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Four Corners`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x4]!=`0x4`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Four Corners`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x8]==`0x8`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` End of Days/Crimson Scarab Corruption`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x8]!=`0x8`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` End of Days/Crimson Scarab Corruption`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x10]==`0x10`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Fear Factory`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x10]!=`0x10`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Fear Factory`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x20]==`0x20`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Lugian Assault/Presk's Bunker`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x20]!=`0x20`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Lugian Assault/Presk's Bunker`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x40]==`0x40`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Gurog Creation`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x40]!=`0x40`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Gurog Creation`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x80]==`0x80`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Rynthid Assessment`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x80]!=`0x80`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Rynthid Assessment`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x100]==`0x100`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Defeating the Curator`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x100]!=`0x100`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Defeating the Curator`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x200]==`0x200`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Hoshino Fortress`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x200]!=`0x200`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Hoshino Fortress`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x400]==`0x400`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Oubliette`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x400]!=`0x400`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Oubliette`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x800]==`0x800`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Halt Dericost`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x800]!=`0x800`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Halt Dericost`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x1000]==`0x1000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Slave Master`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x1000]!=`0x1000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Slave Master`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x2000]==`0x2000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Geraine's Study`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x2000]!=`0x2000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Geraine's Study`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x4000]==`0x4000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Bloodstone Investigation`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x4000]!=`0x4000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Bloodstone Investigation`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x8000]==`0x8000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Deewain`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x8000]!=`0x8000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Deewain`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x10000]==`0x10000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Empyrean Rescue`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x10000]!=`0x10000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Empyrean Rescue`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x20000]==`0x20000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Rynthid Foothold/Genesis`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x20000]!=`0x20000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Rynthid Foothold/Genesis`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x40000]==`0x40000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Mhoire Castle`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x40000]!=`0x40000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Mhoire Castle`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x80000]==`0x80000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Liberation of Uziz`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsa]&0x80000]!=`0x80000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Liberation of Uziz`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[(getquestktprogress[legendaryquestsb]&0x1)]==`0x1`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Dream Reaver`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x1]!=`0x1`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Dream Reaver`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x2]==`0x2`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Janthef's Release`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x2]!=`0x2`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Janthef's Release`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x4]==`0x4`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Shroud of Emotion`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x4]!=`0x4`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Shroud of Emotion`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x8]==`0x8`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Mouf P`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x8]!=`0x8`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Mouf P`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x10]==`0x10`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Serpent Burial Grounds`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x10]!=`0x10`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Serpent Burial Grounds`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x20]==`0x20`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Lost Lore`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x20]!=`0x20`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Lost Lore`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x40]==`0x40`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Rynthid Foundry`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x40]!=`0x40`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Rynthid Foundry`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x80]==`0x80`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Releasing the Light`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x80]!=`0x80`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Releasing the Light`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x100]==`0x100`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` 1st Sister/Bulb of Mornings`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x100]!=`0x100`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` 1st Sister/Bulb of Mornings`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x200]==`0x200`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` 2nd Sister/Bulb of Harvests`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x200]!=`0x200`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` 2nd Sister/Bulb of Harvests`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x400]==`0x400`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` 3rd Sister/Bulb of Twilight`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x400]!=`0x400`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` 3rd Sister/Bulb of Twilight`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x800]==`0x800`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Nanjou Stockade`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x800]!=`0x800`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Nanjou Stockade`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x1000]==`0x1000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Tanada Slaughter`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x1000]!=`0x1000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Tanada Slaughter`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x2000]==`0x2000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Count Phainor`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x2000]!=`0x2000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Count Phainor`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x4000]==`0x4000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Save Karul`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x4000]!=`0x4000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Save Karul`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x8000]==`0x8000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Journey To Madness/Purging the Corruption`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x8000]!=`0x8000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Journey to Madness/Purging the Corruption`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x10000]==`0x10000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Seed of Power`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x10000]!=`0x10000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Seed of Power`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x20000]==`0x20000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Foundry of Izexi`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x20000]!=`0x20000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Foundry of Izexi`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x40000]==`0x40000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Ninja Academy`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x40000]!=`0x40000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Ninja Academy`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x80000]==`0x80000`}
		DO: DoAll
				DoExpr {setvar[completeQuests,getvar[completeQuests] + ` Geraine's Hosts`]}
				DoExpr {setvar[completeCount,getvar[completeCount]+1]}
	IF: Expr {hexstr[getquestktprogress[legendaryquestsb]&0x80000]!=`0x80000`}
		DO: DoAll
				DoExpr {setvar[incompleteQuests,getvar[incompleteQuests] + ` Geraine's Hosts`]}
				DoExpr {setvar[incompleteCount,getvar[incompleteCount]+1]}
	IF: Always
		DO: DoAll
				DoExpr {setvar[completeQuests,`Completed Legendary Quests (` +getvar[completeCount]+ `):` + getvar[completeQuests]]}
				DoExpr {setvar[incompleteQuests,`Incomplete Legendary Quests (` +getvar[incompleteCount]+ `):` + getvar[incompleteQuests]]}
				SetState {PrintQuests}
~~ }
STATE: {PrintQuests} ~~ {
	IF: Always
		DO: DoAll
				DoExpr {echo[getvar[completeQuests],5]}
				DoExpr {echo[getvar[incompleteQuests],6]}
				SetState {End}
~~ }
STATE: {End} ~~ {
	IF: Always
		DO: DoAll
				DoExpr {clearvar[completeQuests]}
				DoExpr {clearvar[incompleteQuests]}
				DoExpr {clearvar[completeCount]}
				DoExpr {clearvar[incompleteCount]}
	IF: All 
			SecsInStateGE 15
			Expr {testgvar[defaultMeta]==1}
		DO: ChatExpr {\/vt meta load +getgvar[defaultMeta]}
~~ }

~~========================= ONLY NAVS APPEAR BELOW THIS LINE =========================~~
