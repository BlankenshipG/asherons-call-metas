~~ {
~~ FOR AUTO-COMPLETION ASSISTANCE: testvar getvar setvar touchvar clearallvars clearvar getcharintprop getchardoubleprop getcharquadprop getcharboolprop getcharstringprop getisspellknown getcancastspell_hunt getcancastspell_buff getcharvital_base getcharvital_current getcharvital_buffedmax getcharskill_traininglevel getcharskill_base getcharskill_buffed getplayerlandcell getplayercoordinates coordinategetns coordinategetwe coordinategetz coordinatetostring coordinateparse coordinatedistancewithz coordinatedistanceflat wobjectgetphysicscoordinates wobjectgetname wobjectgetobjectclass wobjectgettemplatetype wobjectgetisdooropen wobjectfindnearestmonster wobjectfindnearestdoor wobjectfindnearestbyobjectclass wobjectfindininventorybytemplatetype wobjectfindininventorybyname wobjectfindininventorybynamerx wobjectgetselection wobjectgetplayer wobjectfindnearestbynameandobjectclass actiontryselect actiontryuseitem actiontryapplyitem actiontrygiveitem actiontryequipanywand actiontrycastbyid actiontrycastbyidontarget chatbox chatboxpaste statushud statushudcolored uigetcontrol uisetlabel isfalse istrue iif randint cstr strlen getobjectinternaltype cstrf stopwatchcreate stopwatchstart stopwatchstop stopwatchelapsedseconds cnumber floor ceiling round abs getworldname getitemcountininventorybyname getheading getitemcountininventorybynamerx getheadingto actiontrygiveprofile vitae getfellowshipstatus getfellowshipname getfellowshipisopen getfellowshipisleader getfellowshipleaderid getfellowshipcanrecruit getfellowid getfellowshipcount getfellowshiplocked getfellowname getfellowshipisfull sin cos tan sqrt asin acos atan atan2 sinh cosh tanh vtsetmetastate getregexmatch echo chr ord wobjectgetid wobjectgethealth wobjectfindbyid wobjectgetintprop wobjectfindnearestbytemplatetype wobjectgetopencontainer testquestflag getquestktprogress isrefreshingquests getquestktrequired getqueststatus getisday getgamehour getgamehourname getisnight getgameday getgameticks getminutesuntilday getgamemonth getgamemonthname getminutesuntilnight getgameyear uisetvisible uiviewvisible uiviewexists getgvar touchgvar getpvar touchpvar setgvar cleargvar setpvar clearpvar testgvar clearallgvars testpvar clearallpvars dictgetitem dictcreate dicthaskey dictadditem dictkeys dictremovekey dictvalues dictclear dictsize dictcopy listgetitem listpop listcreate listcontains listremove listadd listindexof listremoveat listinsert listlastindexof listclear listcopy listcount listreverse

~~																						
~~ File auto-generated by metaf, a program created by Eskarina of Morningthaw/Coldeve.	
~~		Get metaf here: https://github.com/JJEII/metaf/									
~~																						
~~ All recognized structural designators:												
~~		STATE:				DO:															
~~		IF:					NAV:														
~~																						
~~ All recognized CONDITION (IF:) operation keywords:									
~~		Never				NavEmpty			MobsInDist_Priority		Not				
~~		Always				Death				NeedToBuff				PSecsInStateGE	
~~		All					VendorOpen			NoMobsInDist			SecsOnSpellGE	
~~		Any					VendorClosed		BlockE					BuPercentGE		
~~		ChatMatch			ItemCountLE			CellE					DistToRteGE		
~~		MainSlotsLE			ItemCountGE			IntoPortal				Expr			
~~		SecsInStateGE		MobsInDist_Name		ExitPortal				ChatCapture		
~~																						
~~ All recognized ACTION (DO:) operation keywords:										
~~		None				EmbedNav			ChatExpr				SetOpt			
~~		SetState			CallState			SetWatchdog				CreateView		
~~		Chat				Return				ClearWatchdog			DestroyView		
~~		DoAll				DoExpr				GetOpt					DestroyAllViews	
~~																						
~~ All recognized NAV types:															
~~		circular			follow														
~~		linear				once														
~~																						
~~ All recognized NAV NODE types:														
~~		flw					vnd															
~~		pnt					ptl															
~~		rcl					tlk															
~~		pau					chk															
~~		cht					jmp															
~~		prt (deprecated in VTank)														
~~ }																					

~~ test
STATE: {Default} ~~ {
	IF: Not Expr {getcharskill_traininglevel[39] >= 2} ~~ Cooking trained/specialized
		DO: DoAll
				DoExpr {echo[Cooking not trained or specialized\!,15]}
				SetState {CookingNotTrained}
	IF: ItemCountLE 0 {Brew Kettle}
		DO: DoAll
				DoExpr {echo[No Brew Kettle found, cannot make beer\!,15]}
				SetState {NoBrewKettle}
	IF: SecsInStateGE 2
		DO: SetState {Settings}
~~ }
STATE: {Settings} ~~ {
	IF:	Always
		DO:	DoAll
				Chat {/ub opt set VTank.PatchExpressionEngine True}
				Chat {/ub playeroption UseCraftSuccessDialog false}
				DoExpr {uboptset[`AutoVendor.Enabled`, 1]}
				DoExpr {uboptset[`VTank.FixPortalLoops`, 1]}
				DoExpr {vtsetsetting[NavCloseStopRange,`0.00625`]} ~~ 1.5
				DoExpr {vtsetsetting[NavPriorityBoost,`0`]}
				DoExpr {vtsetsetting[EnableBuffing,`0`]}
				DoExpr {vtsetsetting[EnableCombat,`0`]}
				DoExpr {vtsetsetting[EnableNav,`1`]}
				DoExpr {vtsetsetting[IdlePeaceMode,`1`]}
				DoExpr {vtsetsetting[EnableLooting,`1`]}
				DoExpr {vtsetsetting[LootOnlyRareCorpses,`1`]}
				DoExpr {vtsetsetting[AutoStack,`1`]}
				DoExpr {vtsetsetting[OpenDoors,`1`]}
				SetState {Begin}	
~~ }
STATE: {Begin} ~~ {
	IF: Always
		DO: DoAll
				DoExpr {echo[Make 200 Beers Meta by Sun Invictus,15]}
	IF: All 
			SecsInStateGE 2
			Any
				ItemCountLE 23 {Moarsmuck}
				ItemCountLE 23 {Tusker Spit}
		DO: DoExpr {echo[Warning\: Not enough Moarsmuck and Tusker Spit to make full set of beers\!,15]}
	IF: SecsInStateGE 10
		DO: CallState {CheckForTownNetworkDrop} {NavigatingToJaffres}
~~ }
STATE: {CheckForTownNetworkDrop} ~~ {
	IF: CellE 00070145 ~~ Annex TN drop
		DO: Return
	IF: CellE 00070133 ~~ Gharu'ndim TN drop
		DO: SetState {NavigatingFromGharuToAnnexDrop}
	IF: CellE 00070143 ~~ Aluvian TN drop
		DO: SetState {NavigatingFromAluvianToAnnexDrop}
	IF: CellE 00070156 ~~ Sho TN drop
		DO: SetState {NavigatingFromShoToAnnexDrop}
	IF: All
			Not CellE 00070145
			Not CellE 00070133
			Not CellE 00070143
			Not CellE 00070156
		DO: SetState {AttemptPrimaryRecallToTownNetwork}
~~ }
STATE: {NavigatingFromGharuToAnnexDrop} ~~ {
	IF: Always
		DO: EmbedNav nav1 {TNGharuToAnnex.nav}
	IF: All
			NavEmpty
			SecsInStateGE 3
		DO: SetState {CheckForTownNetworkDrop}
~~ }
STATE: {NavigatingFromAluvianToAnnexDrop} ~~ {
	IF: Always
		DO: EmbedNav nav2 {TNAluvianToAnnex.nav}
	IF: All
			NavEmpty
			SecsInStateGE 3
		DO: SetState {CheckForTownNetworkDrop}
~~ }
STATE: {NavigatingFromShoToAnnexDrop} ~~ {
	IF: Always
		DO: EmbedNav nav3 {TNShoToAnnex.nav}
	IF: All
			NavEmpty
			SecsInStateGE 3
		DO: SetState {CheckForTownNetworkDrop}
~~ }
STATE: {AttemptPrimaryRecallToTownNetwork} ~~ {
	IF: Always
		DO: EmbedNav nav4 {PrimaryRecall.nav}
	IF: All
			ExitPortal
			BlockE 00070000
		DO: SetState {CheckForTownNetworkDrop}
	IF: All
			ExitPortal
			Not BlockE 00070000
		DO: SetState {AttemptSecondaryRecallToTownNetwork}
~~ }
STATE: {AttemptSecondaryRecallToTownNetwork} ~~ {
	IF: Always
		DO: EmbedNav nav5 {SecondaryRecall.nav}
	IF: All
			ExitPortal
			BlockE 00070000
		DO: SetState {CheckForTownNetworkDrop}
	IF: All
			ExitPortal
			Not BlockE 00070000
		DO: DoAll
				DoExpr {echo[Could not get to Town Network via recalls\! Aborting,15]}
				SetState {CouldNotReachTownNetwork}
~~ }
STATE: {NavigatingToJaffres} ~~ {
	IF: Always
		DO: EmbedNav nav0 {TownNetworkToJaffres.nav}
	IF: All
			NavEmpty
			SecsInStateGE 3
		DO: SetState {TalkToJaffres}
~~ }
STATE: {TalkToJaffres} ~~ {
	IF:	Always
		DO:	Chat {/ub use Grocer Jaffres Dini}
	IF: ChatMatch {AutoVendor finished: Grocer Jaffres Dini}
		DO: CallState {CheckForTownNetworkDrop} {NavigatingToWestwatchShopkeeper}
~~ }
STATE: {NavigatingToWestwatchShopkeeper} ~~ {
	IF: Always
		DO: EmbedNav nav6 {TownNetworkToWestwatchShopkeeper.nav}
	IF: All
			NavEmpty
			SecsInStateGE 3
		DO: SetState {TalkToShopkeeper}
~~ }
STATE: {TalkToShopkeeper} ~~ {
	IF:	Always
		DO:	Chat {/ub use Shopkeeper}
	IF: ChatMatch {AutoVendor finished: Shopkeeper}
		DO: SetState {CheckBeerCounts}
~~ }
STATE: {CheckBeerCounts} ~~ {
	IF: All
			ItemCountLE 150 {Amber Ape}
			SecsInStateGE 5
		DO: CallState {MakeAmberApe} {CheckBeerCounts}
	IF: All
			ItemCountLE 150 {Hunter's Stock Amber}
			SecsInStateGE 5
		DO: CallState {MakeHuntersStockAmber} {CheckBeerCounts}
	IF: All 
			ItemCountLE 150 {Tusker Spit Ale}
			SecsInStateGE 5
		DO: CallState {MakeTuskerSpitAle} {CheckBeerCounts}
	IF: All 
			ItemCountLE 150 {Duke Raoul's Distillation}
			SecsInStateGE 5
		DO: CallState {MakeDukeRaoulsDistillation} {CheckBeerCounts}
	IF: All 
			ItemCountLE 150 {Bobo's Stout}
			SecsInStateGE 5
		DO: CallState {MakeBobosStout} {CheckBeerCounts}
	IF: All 
			ItemCountLE 150 {Apothecary Zongo's Stout}
			SecsInStateGE 5
		DO: CallState {MakeApothecaryZongosStout} {CheckBeerCounts}
	IF: SecsInStateGE 10
		DO: SetState {End}
~~ }
STATE: {MakeAmberApe} ~~ {
	IF: All
			ItemCountGE 1 {Brew Kettle}
			ItemCountLE 0 {Full Brew Kettle}
			ItemCountLE 0 {Amber Wort}
			ItemCountLE 0 {Aromatic Amber Wort}
			ItemCountLE 0 {Glorious Amber Brew}
			ItemCountLE 0 {Amber Ape Brew}
			ItemCountLE 0 {Keg of Amber Ape}
		DO: CallState {MakeFullBrewKettle} {MakeAmberApe}
	IF: ItemCountGE 1 {Full Brew Kettle}
		DO: CallState {MakeAmberWort} {MakeAmberApe}
	IF: ItemCountGE 1 {Amber Wort}
		DO: CallState {MakeAromaticAmberWort} {MakeAmberApe}
	IF: ItemCountGE 1 {Aromatic Amber Wort}
		DO: CallState {MakeGloriousAmberBrew} {MakeAmberApe}
	IF: ItemCountGE 1 {Glorious Amber Brew}
		DO: CallState {MakeAmberApeBrew} {MakeAmberApe}
	IF: ItemCountGE 1 {Amber Ape Brew}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Stopped Keg], wobjectfindininventorybyname[Amber Ape Brew]]}
				SetState {MakeAmberApe}
	IF: ItemCountGE 1 {Keg of Amber Ape}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Bottles], wobjectfindininventorybyname[Keg of Amber Ape]]}
				Return
~~ }
STATE: {MakeHuntersStockAmber} ~~ {
	IF: All 
			ItemCountGE 1 {Brew Kettle}
			ItemCountLE 0 {Keg of Hunter's Stock Amber}
			ItemCountLE 0 {Full Brew Kettle}
			ItemCountLE 0 {Amber Wort}
			ItemCountLE 0 {Aromatic Amber Wort}
			ItemCountLE 0 {Glorious Amber Brew}
			ItemCountLE 0 {Hunter's Stock Amber Brew}
		DO: CallState {MakeFullBrewKettle} {MakeHuntersStockAmber}
	IF: ItemCountGE 1 {Full Brew Kettle}
		DO: CallState {MakeAmberWort} {MakeHuntersStockAmber}
	IF: ItemCountGE 1 {Amber Wort}
		DO: CallState {MakeAromaticAmberWort} {MakeHuntersStockAmber}
	IF: ItemCountGE 1 {Aromatic Amber Wort}
		DO: CallState {MakeGloriousAmberBrew} {MakeHuntersStockAmber}
	IF: ItemCountGE 1 {Glorious Amber Brew}
		DO: CallState {MakeHuntersStockAmberBrew} {MakeHuntersStockAmber}
	IF: ItemCountGE 1 {Hunter's Stock Amber Brew}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Stopped Keg], wobjectfindininventorybyname[Hunter's Stock Amber Brew]]}
				SetState {MakeHuntersStockAmber}
	IF: ItemCountGE 1 {Keg of Hunter's Stock Amber}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Bottles], wobjectfindininventorybyname[Keg of Hunter's Stock Amber]]}
				Return
~~ }
STATE: {MakeApothecaryZongosStout} ~~ {
	IF: All 
			ItemCountGE 1 {Brew Kettle}
			ItemCountLE 0 {Keg of Apothecary Zongo's Stout}
			ItemCountLE 0 {Full Brew Kettle}
			ItemCountLE 0 {Dark Wort}
			ItemCountLE 0 {Aromatic Dark Wort}
			ItemCountLE 0 {Glorious Dark Brew}
			ItemCountLE 0 {Apothecary Zongo's Stout Brew}
			ItemCountLE 0 {Roasted Barley}
		DO: CallState {MakeFullBrewKettle} {MakeApothecaryZongosStout}
	IF: All 
			ItemCountGE 1 {Full Brew Kettle}
			ItemCountLE 0 {Roasted Barley}
		DO: CallState {MakeRoastedBarley} {MakeApothecaryZongosStout}
	IF: ItemCountGE 1 {Roasted Barley}
		DO: CallState {MakeDarkWort} {MakeApothecaryZongosStout}
	IF: ItemCountGE 1 {Dark Wort}
		DO: CallState {MakeAromaticDarkWort} {MakeApothecaryZongosStout}
	IF: ItemCountGE 1 {Aromatic Dark Wort}
		DO: CallState {MakeGloriousDarkBrew} {MakeApothecaryZongosStout}
	IF: ItemCountGE 1 {Glorious Dark Brew}
		DO: CallState {MakeApothecaryZongosStoutBrew} {MakeApothecaryZongosStout}
	IF: ItemCountGE 1 {Apothecary Zongo's Stout Brew}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Stopped Keg], wobjectfindininventorybyname[Apothecary Zongo's Stout Brew]]}
				SetState {MakeApothecaryZongosStout}
	IF: ItemCountGE 1 {Keg of Apothecary Zongo's Stout}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Bottles], wobjectfindininventorybyname[Keg of Apothecary Zongo's Stout]]}
				Return
~~ }
STATE: {MakeBobosStout} ~~ {
	IF: All 
			ItemCountGE 1 {Brew Kettle}
			ItemCountLE 0 {Keg of Bobo's Stout}
			ItemCountLE 0 {Full Brew Kettle}
			ItemCountLE 0 {Dark Wort}
			ItemCountLE 0 {Aromatic Dark Wort}
			ItemCountLE 0 {Glorious Dark Brew}
			ItemCountLE 0 {Bobo's Stout Brew}
			ItemCountLE 0 {Roasted Barley}
		DO: CallState {MakeFullBrewKettle} {MakeBobosStout}
	IF: All 
			ItemCountGE 1 {Full Brew Kettle}
			ItemCountLE 0 {Roasted Barley}
		DO: CallState {MakeRoastedBarley} {MakeBobosStout}
	IF: ItemCountGE 1 {Roasted Barley}
		DO: CallState {MakeDarkWort} {MakeBobosStout}
	IF: ItemCountGE 1 {Dark Wort}
		DO: CallState {MakeAromaticDarkWort} {MakeBobosStout}
	IF: ItemCountGE 1 {Aromatic Dark Wort}
		DO: CallState {MakeGloriousDarkBrew} {MakeBobosStout}
	IF: ItemCountGE 1 {Glorious Dark Brew}
		DO: CallState {MakeBobosStoutBrew} {MakeBobosStout}
	IF: ItemCountGE 1 {Bobo's Stout Brew}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Stopped Keg], wobjectfindininventorybyname[Bobo's Stout Brew]]}
				SetState {MakeBobosStout}
	IF: ItemCountGE 1 {Keg of Bobo's Stout}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Bottles], wobjectfindininventorybyname[Keg of Bobo's Stout]]}
				Return
~~ }
STATE: {MakeTuskerSpitAle} ~~ {
	IF: All 
			ItemCountGE 1 {Brew Kettle}
			ItemCountLE 0 {Keg of Tusker Spit Ale}
			ItemCountLE 0 {Full Brew Kettle}
			ItemCountLE 0 {Sweet Wort}
			ItemCountLE 0 {Aromatic Finished Wort}
			ItemCountLE 0 {Glorious Fermented Brew}
			ItemCountLE 0 {Tusker Spit Brew}
		DO: CallState {MakeFullBrewKettle} {MakeTuskerSpitAle}
	IF: ItemCountGE 1 {Full Brew Kettle}
		DO: CallState {MakeSweetWort} {MakeTuskerSpitAle}
	IF: ItemCountGE 1 {Sweet Wort}
		DO: CallState {MakeAromaticFinishedWort} {MakeTuskerSpitAle}
	IF: ItemCountGE 1 {Aromatic Finished Wort}
		DO: CallState {MakeGloriousFermentedBrew} {MakeTuskerSpitAle}
	IF: ItemCountGE 1 {Glorious Fermented Brew}
		DO: CallState {MakeTuskerSpitBrew} {MakeTuskerSpitAle}
	IF: ItemCountGE 1 {Tusker Spit Brew}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Stopped Keg], wobjectfindininventorybyname[Tusker Spit Brew]]}
				SetState {MakeTuskerSpitAle}
	IF: ItemCountGE 1 {Keg of Tusker Spit Ale}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Bottles], wobjectfindininventorybyname[Keg of Tusker Spit Ale]]}
				Return
~~ }
STATE: {MakeDukeRaoulsDistillation} ~~ {
	IF: All 
			ItemCountGE 1 {Brew Kettle}
			ItemCountLE 0 {Keg of Duke Raoul's Distillation}
			ItemCountLE 0 {Full Brew Kettle}
			ItemCountLE 0 {Sweet Wort}
			ItemCountLE 0 {Aromatic Finished Wort}
			ItemCountLE 0 {Glorious Fermented Brew}
			ItemCountLE 0 {Duke Raoul's Distillation Brew}
		DO: CallState {MakeFullBrewKettle} {MakeDukeRaoulsDistillation}
	IF: ItemCountGE 1 {Full Brew Kettle}
		DO: CallState {MakeSweetWort} {MakeDukeRaoulsDistillation}
	IF: ItemCountGE 1 {Sweet Wort}
		DO: CallState {MakeAromaticFinishedWort} {MakeDukeRaoulsDistillation}
	IF: ItemCountGE 1 {Aromatic Finished Wort}
		DO: CallState {MakeGloriousFermentedBrew} {MakeDukeRaoulsDistillation}
	IF: ItemCountGE 1 {Glorious Fermented Brew}
		DO: CallState {MakeDukeRaoulsDistillationBrew} {MakeDukeRaoulsDistillation}
	IF: ItemCountGE 1 {Duke Raoul's Distillation Brew}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Stopped Keg], wobjectfindininventorybyname[Duke Raoul's Distillation Brew]]}
				SetState {MakeDukeRaoulsDistillation}
	IF: ItemCountGE 1 {Keg of Duke Raoul's Distillation}
		DO: DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Empty Bottles], wobjectfindininventorybyname[Keg of Duke Raoul's Distillation]]}
				Return
~~ }
STATE: {MakeFullBrewKettle} ~~ {
	IF:	All
			ItemCountGE 1 {Water}
			ItemCountGE 1 {Brew Kettle}
		DO:	DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Brew Kettle], wobjectfindininventorybyname[Water]]}
	IF:	Any
			ItemCountLE 0 {Water}
			ItemCountGE 1 {Full Brew Kettle}
		DO:	Return
	IF: SecsInStateGE 10
		DO: SetState {MakeFullBrewKettle}
~~ }
STATE: {MakeRoastedBarley} ~~ {
	IF:	All
			ItemCountGE 1 {Plain Barley}
			ItemCountGE 1 {Baking Pan}
		DO:	DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Baking Pan], wobjectfindininventorybyname[Plain Barley]]}
	IF:	Any
			ItemCountLE 0 {Plain Barley}
			ItemCountGE 1 {Roasted Barley}
		DO:	Return
~~ }
STATE: {MakeSweetWort} ~~ {
	IF:	All
			ItemCountGE 1 {Plain Barley}
			ItemCountGE 1 {Full Brew Kettle}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Plain Barley], wobjectfindininventorybyname[Full Brew Kettle]]}
				SetState {MakeSweetWort}
	IF:	Any
			ItemCountLE 0 {Plain Barley}
			ItemCountLE 0 {Full Brew Kettle}
		DO:	Return
~~ }
STATE: {MakeDarkWort} ~~ {
	IF:	All
			ItemCountGE 1 {Roasted Barley}
			ItemCountGE 1 {Full Brew Kettle}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Roasted Barley], wobjectfindininventorybyname[Full Brew Kettle]]}
				SetState {MakeDarkWort}
	IF:	Any
			ItemCountLE 0 {Roasted Barley}
			ItemCountLE 0 {Full Brew Kettle}
		DO:	Return
~~ }
STATE: {MakeAmberWort} ~~ {
	IF:	All
			ItemCountGE 1 {Amber Barley}
			ItemCountGE 1 {Full Brew Kettle}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Amber Barley], wobjectfindininventorybyname[Full Brew Kettle]]}
				SetState {MakeAmberWort}
	IF:	Any
			ItemCountLE 0 {Amber Barley}
			ItemCountLE 0 {Full Brew Kettle}
		DO:	Return
~~ }
STATE: {MakeAromaticAmberWort} ~~ {
	IF:	All
			ItemCountGE 1 {Ultra Green Hops}
			ItemCountGE 1 {Amber Wort}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Ultra Green Hops], wobjectfindininventorybyname[Amber Wort]]}
				SetState {MakeAromaticAmberWort}
	IF:	Any
			ItemCountLE 0 {Ultra Green Hops}
			ItemCountLE 0 {Amber Wort}
		DO:	Return
~~ }
STATE: {MakeAromaticDarkWort} ~~ {
	IF:	All
			ItemCountGE 1 {Ultra Green Hops}
			ItemCountGE 1 {Dark Wort}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Ultra Green Hops], wobjectfindininventorybyname[Dark Wort]]}
				SetState {MakeAromaticDarkWort}
	IF:	Any
			ItemCountLE 0 {Ultra Green Hops}
			ItemCountLE 0 {Dark Wort}
		DO:	Return
~~ }
STATE: {MakeAromaticFinishedWort} ~~ {
	IF:	All
			ItemCountGE 1 {Ultra Green Hops}
			ItemCountGE 1 {Sweet Wort}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Ultra Green Hops], wobjectfindininventorybyname[Sweet Wort]]}
				SetState {MakeAromaticFinishedWort}
	IF:	Any
			ItemCountLE 0 {Ultra Green Hops}
			ItemCountLE 0 {Sweet Wort}
		DO:	Return
~~ }
STATE: {MakeGloriousAmberBrew} ~~ {
	IF:	All
			ItemCountGE 1 {Dried Yeast}
			ItemCountGE 1 {Aromatic Amber Wort}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Dried Yeast], wobjectfindininventorybyname[Aromatic Amber Wort]]}
				SetState {MakeGloriousAmberBrew}
	IF:	Any
			ItemCountLE 0 {Dried Yeast}
			ItemCountLE 0 {Aromatic Amber Wort}
		DO:	Return
~~ }
STATE: {MakeGloriousDarkBrew} ~~ {
	IF:	All
			ItemCountGE 1 {Dried Yeast}
			ItemCountGE 1 {Aromatic Dark Wort}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Dried Yeast], wobjectfindininventorybyname[Aromatic Dark Wort]]}
				SetState {MakeGloriousAmberBrew}
	IF:	Any
			ItemCountLE 0 {Dried Yeast}
			ItemCountLE 0 {Aromatic Dark Wort}
		DO:	Return
~~ }
STATE: {MakeGloriousFermentedBrew} ~~ {
	IF:	All
			ItemCountGE 1 {Dried Yeast}
			ItemCountGE 1 {Aromatic Finished Wort}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Dried Yeast], wobjectfindininventorybyname[Aromatic Finished Wort]]}
				SetState {MakeGloriousFermentedBrew}
	IF:	Any
			ItemCountLE 0 {Dried Yeast}
			ItemCountLE 0 {Aromatic Finished Wort}
		DO:	Return
~~ }
STATE: {MakeApothecaryZongosStoutBrew} ~~ {
	IF:	All
			ItemCountGE 1 {Moarsmuck}
			ItemCountGE 1 {Glorious Dark Brew}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Moarsmuck], wobjectfindininventorybyname[Glorious Dark Brew]]}
				SetState {MakeApothecaryZongosStoutBrew}
	IF:	Any
			ItemCountLE 0 {Moarsmuck}
			ItemCountLE 0 {Glorious Dark Brew}
		DO:	Return
~~ }
STATE: {MakeBobosStoutBrew} ~~ {
	IF:	All
			ItemCountGE 1 {Tusker Spit}
			ItemCountGE 1 {Glorious Dark Brew}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Tusker Spit], wobjectfindininventorybyname[Glorious Dark Brew]]}
				SetState {MakeBobosStoutBrew}
	IF:	Any
			ItemCountLE 0 {Tusker Spit}
			ItemCountLE 0 {Glorious Dark Brew}
		DO:	Return
~~ }
STATE: {MakeAmberApeBrew} ~~ {
	IF:	All
			ItemCountGE 1 {Tusker Spit}
			ItemCountGE 1 {Glorious Amber Brew}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Tusker Spit], wobjectfindininventorybyname[Glorious Amber Brew]]}
				SetState {MakeAmberApeBrew}
	IF:	Any
			ItemCountLE 0 {Tusker Spit}
			ItemCountLE 0 {Glorious Amber Brew}
		DO:	Return
~~ }
STATE: {MakeTuskerSpitBrew} ~~ {
	IF:	All
			ItemCountGE 1 {Tusker Spit}
			ItemCountGE 1 {Glorious Fermented Brew}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Tusker Spit], wobjectfindininventorybyname[Glorious Fermented Brew]]}
				SetState {MakeTuskerSpitBrew}
	IF:	Any
			ItemCountLE 0 {Tusker Spit}
			ItemCountLE 0 {Glorious Fermented Brew}
		DO:	Return
~~ }
STATE: {MakeDukeRaoulsDistillationBrew} ~~ {
	IF:	All
			ItemCountGE 1 {Moarsmuck}
			ItemCountGE 1 {Glorious Fermented Brew}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Moarsmuck], wobjectfindininventorybyname[Glorious Fermented Brew]]}
				SetState {MakeDukeRaoulsDistillationBrew}
	IF:	Any
			ItemCountLE 0 {Moarsmuck}
			ItemCountLE 0 {Glorious Fermented Brew}
		DO:	Return
~~ }
STATE: {MakeHuntersStockAmberBrew} ~~ {
	IF:	All
			ItemCountGE 1 {Moarsmuck}
			ItemCountGE 1 {Glorious Amber Brew}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Moarsmuck], wobjectfindininventorybyname[Glorious Amber Brew]]}
				SetState {MakeHuntersStockAmberBrew}
	IF:	Any
			ItemCountLE 0 {Moarsmuck}
			ItemCountLE 0 {Glorious Amber Brew}
		DO:	Return
~~ }
STATE: {End} ~~ {
	IF:	Always 
		DO:	None	
~~ }

~~========================= ONLY NAVS APPEAR BELOW THIS LINE =========================~~
NAV: nav0 once ~~ {
	pnt -101.658262634277 -96.7016267776489 2.08333134651184E-05
	pnt -101.657371838888 -96.7700387318929 2.08333134651184E-05
	pnt -101.656788603465 -96.8148328463237 2.08333134651184E-05
	pnt -101.656442896525 -96.8413861592611 2.08333134651184E-05
	pnt -101.612082004547 -96.841678015391 2.08333134651184E-05
	pnt -101.605079301198 -96.847042687734 2.08333134651184E-05
	ptl -61.0169311841329 71.8173158168793 0.21668750445048 -101.590900007884 -96.8501458485921 -0.000262499845121056 14 {Portal to Sanamar}
	pnt -60.9095768133799 72.0471061388651 0.21668750445048
	pnt -60.9177204926809 72.0057504971822 0.21668750445048
	pnt -60.9311178525289 71.9627477010091 0.21668750445048
	pnt -60.9576906840007 71.9237624804179 0.21668750445048
	pnt -60.993600320816 71.8684504191081 0.21668750445048
	pnt -61.0169311841329 71.8173158168793 0.21668750445048
~~ }
NAV: nav1 once ~~ {
	pnt -101.657279141744 -96.6906586329142 2.08333134651184E-05
~~ }
NAV: nav2 once ~~ {
	pnt -101.613241004944 -96.6465869903564 2.08333134651184E-05
	pnt -101.657922903697 -96.6921284039815 2.08333134651184E-05
~~ }
NAV: nav3 once ~~ {
	pnt -101.657663281759 -96.6933292071025 2.08333134651184E-05
~~ }
NAV: nav4 once ~~ {
	rcl -101.657922903697 -96.6921284039815 2.08333134651184E-05 {Primary Portal Recall}
~~ }
NAV: nav5 once ~~ {
	rcl -101.657922903697 -96.6921284039815 2.08333134651184E-05 {Secondary Portal Recall}
~~ }
NAV: nav6 once ~~ {
	pnt -101.657367483775 -96.764884185791 2.08333134651184E-05
	pnt -101.659137662252 -96.8355353037516 2.08333134651184E-05
	pnt -101.660649140676 -96.9067611058553 2.08333134651184E-05
	pnt -101.630752468109 -96.9283016840617 2.08333134651184E-05
	pnt -101.604320526123 -96.9329191843669 2.08333134651184E-05
	ptl -73.5180942853292 72.8284549713135 0.00835416714350382 -101.59051249822 -96.933137512207 -0.000262499845121056 14 {Portal to Westwatch}
	pnt -73.4084217707316 72.8022438367208 0.00835416714350382
	pnt -73.4407230059306 72.7979211807251 0.00835416714350382
	pnt -73.4993399302165 72.795768737793 0.00835416714350382
	pnt -73.5132035573324 72.8023979822795 0.00835416714350382
	pnt -73.5171055793762 72.7651217460632 0.00835416714350382
	pnt -73.5149030049642 72.7805754343669 0.00835416714350382
	pnt -73.5139129638672 72.7875391642253 0.00835416714350382
	pnt -73.5124660174052 72.7978038787842 0.00835416714350382
	pnt -73.5125213305155 72.803929456075 0.00835416714350382
	pnt -73.5119868596395 72.8155848503113 0.00835416714350382
	pnt -73.5115248044332 72.8259417215983 0.00835416714350382
	pnt -73.5180942853292 72.8284549713135 0.00835416714350382
~~ }
